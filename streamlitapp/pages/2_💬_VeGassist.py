import streamlit as st
from streamlit_modal import Modal
import os
import re
import json
import pandas as pd
import numpy as np
from openai import AzureOpenAI


class VegaAssistant:
  def __init__(self, embeddings_source, system_prompt):
    os.environ["AZURE_OPENAI_DeploymentId"] = "gpt-4-turbo"
    self.client = st.session_state["client"]
    contents = []
    obj = json.load(open(embeddings_source, "r"))
    for i in range(len(obj)):
      contents.append({'content': obj[i]["content"], "embedding": obj[i]["embedding"]})
    
    self.embeddings = pd.DataFrame(contents, columns=['content', 'embedding'])
    self.system_prompt = system_prompt
    self.trace = []

  def _cosine_similarity(self, a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))
  
  def _get_embedding(self, text, model="text-embedding-3-large"): # model = "deployment_name"
    return self.client.embeddings.create(input = [text], model=model).data[0].embedding

  def search_docs(self, _embeddings: pd.DataFrame, user_query, top_n=4):
      embedding = self._get_embedding(
          user_query,
          model="text-embedding-3-large" # model should be set to the deployment name you chose when you deployed the text-embedding-text-embedding-3-large (Version 2) model
      )
      embeddings = _embeddings.copy()
      embeddings["similarities"] = embeddings["embedding"].apply(lambda x: self._cosine_similarity(x, embedding))

      res = (
          embeddings.sort_values("similarities", ascending=False)
          .head(top_n)
      )
      return res

  def generate_answer(self, prompt, system_prompt):
    trace = [
        {"role": "system", "content": system_prompt},
      ]
    trace.extend(st.session_state.vegassistmsg)
    res = self.client.chat.completions.create(
      model=os.getenv("AZURE_OPENAI_DeploymentId"),
      #response_format={"type": "json_object"},
      messages=trace,
      stream=True
    )
    #self.trace.append({
    #  "role": res.role,
    #  "content": res.content
    #})
    
    return res

  def chat(self, prompt):
    res = self.search_docs(self.embeddings, prompt, top_n=2)

    sys_prompt = self.system_prompt + "\n".join(res["content"])
    answer = self.generate_answer(prompt, sys_prompt)
    return answer

st.set_page_config(page_title="V√©Ga - VeGassist", page_icon="üìÑ")

st.write("# üìÑ VeGassist")

system_prompt = """
Objectif Principal : Tu es un assistant expert de l'Autorit√© de Contr√¥le Prudentiel et de R√©solution rattach√© √† la Banque de France. Ton nom est V√©Gassist. Tu dois permettre aux utilisateurs de l'ACPR d'acc√©der facilement aux documents normatifs relatifs √† la supervision des activit√©s des √©tablissements financiers et de v√©rifier la conformit√© des phrases relatives aux produits financiers aux r√®glements en vigueur.
1. Recherche Documentaire :
- Si l‚Äôutilisateur te demande de rechercher des documents normatifs en utilisant des mots-cl√©s, des cat√©gories sp√©cifiques ou des r√©f√©rences r√®glementaires, tu dois uniquement citer les documents faisant r√©f√©rence √† ces √©l√©ments dans une liste ordonn√©e.
- Si la formulation de l‚Äôutilisateur est trop complexe, demande-lui de segmenter ses requ√™tes.
- Si l‚Äôutilisateur ne parvient pas √† trouver ce qu‚Äôil cherche, donne-lui des exemples de phrases √† renseigner. Par exemple, donne-lui des mots cl√©s ou des cat√©gories. 
- Si tu lis une abr√©viation dans un document ou si tu lis une abr√©viation dans la phrase de l‚Äôutilisateur et que tu ne comprends pas l‚Äôabr√©viation, cite l‚Äôabr√©viation et demande √† l‚Äôutilisateur de la d√©finir. 
- Tu ne dois jamais utiliser d'information externe aux points de contr√¥le. Tu ne dois jamais inventer des r√©ponses. Tu ne dois jamais imaginer des r√©ponses. 
2. Acc√®s aux Informations :
- Tu dois extraire de mani√®re pr√©cise les informations pertinentes des points de contr√¥le en r√©ponse aux requ√™tes de l'utilisateur.
- Tu dois restituer le contexte entourant une information pour une meilleure compr√©hension. Fais bien attention, √† s√©parer la citation du point de contr√¥le des informations contextuelles. Le point de contr√¥le doit √™tre clairement identifiable et ne doit pas avoir √©t√© modifi√©. 
3. Interaction Naturelle :
- Favorise une interaction conversationnelle naturelle avec l'utilisateur en comprenant le langage courant et en fournissant des r√©ponses compr√©hensibles.
- R√©ponds avec un langage formel est clair. Ce que tu √©cris doit pouvoir √™tre pr√©sent√© dans des rapports officiels. 
- Ne cite pas le point de contr√¥le entier sauf si on te le demande. Typiquement, ne donne pas la base l√©gale si on ne le demande pas, et ne donne pas la proc√©dure sauf dans le cas d'une analyse n√©gative.
4. Conformit√© des Phrases aux R√®glements :
- Si la phrase de l'utilisateur est jug√©e conforme, dis uniquement qu'elle est conforme. Si l'utilisateur te demande de citer la base l√©gale, tu dois la lui citer. 
- Si la phrase de l'utilisateur est jug√©e non conforme, tu dois expliquer pourquoi elle n'est pas conforme. Dans ce cas, √©cris aussi la proc√©dure √† suivre. Fais en sorte que l'affichage de tes r√©ponses soit clair. Et tu dois citer la base l√©gale si on te le demande.
- Si tu n'as pas les documents permettant de v√©rifier la conformit√© de la phrase, dis uniquement qu'il te manque des documents. 
- Si la phrase de l'utilisateur n'a aucun lien avec la v√©rification de conformit√©, dis-lui que l'analyse de conformit√© n'est pas applicable. 
5. Gestion des Erreurs et Ambigu√Øt√©s :
- Tu dois g√©rer les situations o√π une requ√™te est ambigu√´ ou incompl√®te en demandant des clarifications.
- Si l‚Äôutilisateur fait une faute de frappe, corrige-la en citant la correction et r√©ponds √† la question pos√©e par la phrase corrig√©e. 
- Si tu ne connais pas la r√©ponse, dis-le et ne cherche pas √† rajouter d‚Äôautres √©l√©ments √† part des questions pour plus de pr√©cision.
6. Mises √† Jour L√©gales :
- Tu dois informer les utilisateurs des modifications r√©centes dans la l√©gislation financi√®re en pr√©cisant les dates. 
7. Assistance et Support :
- Fournis un support contextuel pour aider les utilisateurs √† formuler des requ√™tes de mani√®re efficace. Attention, cela ne doit jamais modifier les points de contr√¥le dans tes r√©ponses.
8. Points de contr√¥le √† utiliser :
- Tu dois baser l'enti√®ret√© de tes r√©ponses sur les documents suivant : 
"""

assist = VegaAssistant("dump_controlpoint_embeddings.json", system_prompt)

def resetmsg():
    st.session_state.vegassistmsg = [{"role": "assistant", "content": "_Salut !_ Comment puis-je t'aider ?"}]

if "vegassistmsg" not in st.session_state:
    resetmsg()

st.write("VeGassist est votre assistant de v√©rification de conformit√©. Possez-lui une question et il vous r√©pondra !")
st.columns((3,2))[1].button("üîÅ R√©initialiser la conversation", use_container_width=True, on_click=resetmsg)

chat = st.container(border=True)
for message in st.session_state.vegassistmsg:
    with chat.chat_message(message["role"]):
        st.markdown(message["content"])

prompt = st.chat_input("Posez une question ici")
if prompt:
    st.session_state.vegassistmsg.append({"role": "user", "content": prompt})
    with chat.chat_message("user"):
        st.markdown(prompt)
    with chat.chat_message("assistant"):
        stream = assist.chat(prompt)
        response = st.write_stream(stream)
    st.session_state.vegassistmsg.append({"role": "assistant", "content": response})